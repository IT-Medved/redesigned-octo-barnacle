{
  "name": "UGC Ad Creator",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Get the base64 string from the specific path\nlet base64String = $input.first().json.choices[0].message.images[0].image_url.url;\n\n// Remove the data URI prefix if it exists\nif (base64String.startsWith('data:image/')) {\n  // Find the comma that separates the prefix from the actual base64 data\n  const commaIndex = base64String.indexOf(',');\n  if (commaIndex !== -1) {\n    base64String = base64String.substring(commaIndex + 1);\n  }\n}\n\nreturn [{\n  json: {\n    base64_data: base64String\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1360,
        -80
      ],
      "id": "6f9abf42-a073-496d-ab27-0b5cc936fd0c",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64_data",
        "options": {
          "fileName": "generated_image",
          "mimeType": "image/png"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -1136,
        -80
      ],
      "id": "5f2ee7d7-0e2c-4e26-9e87-6132d220db7f",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"google/gemini-2.5-flash-image-preview\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"{{ $('Send message and wait for response').item.json.data.text }}. Photorealistic for a UGC ad. square ratio.\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"https://api.telegram.org/file/bot{{ $('Edit Fields').item.json.telegram_token }}/{{ $json.result.file_path }}\"\n          }\n        }\n      ]\n    }\n  ]\n  \n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1584,
        -80
      ],
      "id": "93e06747-702c-4382-ae1e-2a9ff786b781",
      "name": "HTTP Request",
      "credentials": {
        "openRouterApi": {
          "id": "A7JaVK4hNWPXUTuK",
          "name": "n8n tutorial"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1600,
        -304
      ],
      "id": "d6340cbc-572e-40bb-b0e1-e4352964d9d2",
      "name": "Telegram Trigger",
      "webhookId": "c578267b-4fca-49f6-a52f-bd354bd4e4f4",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "daaeed7f-da2b-4c9a-a33e-d78c619e93cc",
              "name": "telegram_token",
              "value": "INSERT TOKEN HERE",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1344,
        -304
      ],
      "id": "bc0c7fab-8ecc-4e33-aeaa-f952bf0591ba",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "message": "Thanks for uploading the image. Please provide instructions.",
        "responseType": "freeText",
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1104,
        -304
      ],
      "id": "13e6d234-3ecc-42cd-8d94-376a466b2606",
      "name": "Send message and wait for response",
      "webhookId": "4ee08df4-d0e9-4d2f-81f9-d7e38d9b17cb",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Telegram Trigger').item.json.message.photo[2].file_id }}",
        "download": false
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -880,
        -304
      ],
      "id": "d9a14a92-4410-4351-a705-af1c79d4eaa1",
      "name": "Get a file",
      "webhookId": "13857ee5-781f-4e1c-9416-aad416df72ac",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -880,
        -80
      ],
      "id": "a81723e9-cd4e-4813-a637-c5f659c14abf",
      "name": "Send a photo message",
      "webhookId": "22be872e-27aa-420b-be32-265ca6271a49",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "message": "Please provide a dialog idea for your ad.",
        "responseType": "freeText",
        "options": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -64,
        -416
      ],
      "id": "7e4ae1b8-b527-4279-bed6-7c280c7f16cd",
      "name": "Send message and wait for response1",
      "webhookId": "1739c0ea-8542-41df-8717-694446f2196d",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here is what I'm looking for: {{ $json.data.text }}\n\nHere's what's in the initial image which will be used to generate the video:\n\n{{ $('HTTP Request3').item.json.choices[0].message.content }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are an expert at generating scripts for authentic UGC-style ads that feel natural and unscripted.\n\nYour job is to create a 2-segment video script based on the user's concept. The video starts with the provided image.\n\nCRITICAL CONSTRAINTS:\n- DO NOT add objects that aren't in the original image (no food, props, tools, etc.)\n- DO NOT remove objects that are in the original image\n- The person must only interact with objects/elements visible in the source image\n- Actions must be physically possible given the person's starting position and surroundings\n- No extra text or captions\n\nREQUIREMENTS:\n- Each segment should be 7-8 seconds of realistic action/dialogue\n- Include camera movement when it enhances the storytelling (zoom in, pan, tilt, etc.)\n- Actions must be specific and filmable\n- Dialogue should sound conversational and unscripted\n- Show don't tell - actions should visually demonstrate product benefits\n- Use single quotes for any dialogue\n- Keep it authentic - avoid overly promotional language\n\nImage context will be provided to guide what's actually visible and possible.\n\nOutput format:\n{\n\"segment-1\": \"[camera movement if needed] + [specific action using only visible elements] + [natural dialogue if applicable]\",\n\"segment-2\": \"[camera movement if needed] + [specific action using only visible elements] + [natural dialogue if applicable]\"\n}\n\nExample camera movements: camera slowly zooms in, camera pans left to follow, camera tilts up, camera pulls back\nExample constrained actions: adjusts the visible strap, shifts weight on the visible surface, turns toward camera, gestures with free hand"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -432,
        -160
      ],
      "id": "1b02e43c-61fb-4895-a2ac-39f20fea9b45",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "claude-sonnet-4-20250514",
          "cachedResultName": "Claude 4 Sonnet"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -544,
        0
      ],
      "id": "5297d71b-bf49-467c-a984-c041dc61f36b",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "KztKfqsNjNkkJM89",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\"segment-1\": \"the man tugs his sleeve and describes how elastic the fabric is\",\n\"segment-2\": \"the man raises his arms to stretch, and the shirt flows with his movements\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -192,
        16
      ],
      "id": "06892c87-7a60-4660-9480-7981c817bacb",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -48,
        -160
      ],
      "id": "8c2bda2c-9f99-4197-a7b5-c6db16526011",
      "name": "Split Out"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.kie.ai/api/v1/veo/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "=json",
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "jsonBody": "={\n  \"prompt\": \"{{ $json.output }}\",\n  \"imageUrls\": [\n    \"https://api.telegram.org/file/bot{{ $('Edit Fields').item.json.telegram_token }}/{{ $('Get a file1').item.json.result.file_path }}\"\n  ],\n  \"model\": \"veo3_fast\",\n  \"aspectRatio\": \"9:16\",\n  \"seeds\": 12345,\n  \"enableFallback\": false\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        368,
        -288
      ],
      "id": "0def38d2-9c78-4d9a-9879-7dd24dee0028",
      "name": "HTTP Request1",
      "credentials": {
        "httpBearerAuth": {
          "id": "oXuPKE3jjqgoyzx9",
          "name": "Kie AI"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.result.photo[3].file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -464,
        -416
      ],
      "id": "9299f1c7-0518-4e59-9ad9-569af8befab8",
      "name": "Get a file1",
      "webhookId": "2bc7bf68-ed5a-41e8-a377-c971fcbf7dd2",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "amount": 60
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        576,
        -288
      ],
      "id": "48f3fb02-945b-440a-b3c2-52fa99d6ad3f",
      "name": "Wait",
      "webhookId": "41f3bf3a-fc54-4162-99c9-2b37a06adcb0"
    },
    {
      "parameters": {
        "url": "https://api.kie.ai/api/v1/veo/record-info",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "taskId",
              "value": "={{ $json.data.taskId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        784,
        -288
      ],
      "id": "df76318b-04b7-4074-a9d3-d57d4e438f3d",
      "name": "HTTP Request2",
      "credentials": {
        "httpBearerAuth": {
          "id": "oXuPKE3jjqgoyzx9",
          "name": "Kie AI"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "data.response.resultUrls"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1232,
        -336
      ],
      "id": "08e7feea-baf9-49e4-a317-c0fa125277ac",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "videoSources": {
          "sources": [
            {
              "value": "={{ $json.resultUrls[0][0] }}"
            },
            {
              "value": "={{ $json.resultUrls[1][0] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-mediafx.mediaFX",
      "typeVersion": 1,
      "position": [
        1424,
        -336
      ],
      "id": "c897aaaf-8e59-44f2-935e-148b15e025d4",
      "name": "Merge video"
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1616,
        -336
      ],
      "id": "72b0ca99-dfc2-4c41-98bf-a04dae2f75b4",
      "name": "Send a video",
      "webhookId": "bce3aa2c-b445-40a7-a9e1-36388cbb33e9",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.successFlag }}",
                    "rightValue": 1,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    },
                    "id": "f29a6ac3-9fb2-44a7-ba55-b1b82b42b0bd"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Success"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "490fc789-6e8c-423e-b13e-7b1610aa79e9",
                    "leftValue": "={{ $json.data.successFlag }}",
                    "rightValue": 0,
                    "operator": {
                      "type": "number",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "In Process"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        976,
        -304
      ],
      "id": "2378e050-9136-4a3c-b6f6-aca590832e08",
      "name": "Switch"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=Video generation failed",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1248,
        -144
      ],
      "id": "8b71edd6-260b-427b-9aef-ca658c009c0a",
      "name": "Send a text message",
      "webhookId": "e00c2c2c-533f-4ca4-bd03-3a7760f2524f",
      "credentials": {
        "telegramApi": {
          "id": "ajmftI5xROYTl3kH",
          "name": "UGC Ads"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"google/gemini-2.5-flash-image-preview:free\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Provide a detailed description of what's in the image. The setting, the subject(s), what the subject is doing/holding, etc\"\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"https://api.telegram.org/file/bot{{ $('Edit Fields').item.json.telegram_token }}/{{ $json.result.file_path }}\"\n          }\n        }\n      ]\n    }\n  ]\n  \n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -272,
        -416
      ],
      "id": "6b73f708-e205-4179-982a-589b158fcb61",
      "name": "HTTP Request3",
      "credentials": {
        "openRouterApi": {
          "id": "A7JaVK4hNWPXUTuK",
          "name": "n8n tutorial"
        }
      }
    },
    {
      "parameters": {
        "content": "## Generate Image",
        "height": 512,
        "width": 1024
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1696,
        -416
      ],
      "typeVersion": 1,
      "id": "d242d940-6e4d-45f0-ba94-ac3733aebee7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Video Generation Prompts",
        "height": 880,
        "width": 832,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -624,
        -576
      ],
      "typeVersion": 1,
      "id": "2a64ee56-86af-418f-b585-6e77be3e2239",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Generate and output video",
        "height": 512,
        "width": 1616
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        256,
        -416
      ],
      "typeVersion": 1,
      "id": "8bd40814-d0ea-4768-8306-296bdb20d0fb",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Nano Banana 🍌 + VEO3 Fast UGC Generator by Shab Noor",
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -320,
        -720
      ],
      "typeVersion": 1,
      "id": "fad5c41e-a8b8-4cf0-8f05-408a51a0ff87",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Send message and wait for response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Send a photo message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a photo message": {
      "main": [
        [
          {
            "node": "Get a file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file1": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Merge video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge video": {
      "main": [
        [
          {
            "node": "Send a video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Send message and wait for response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "96244f7f-874e-4e1a-8cc6-79aee3c15df5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f8d903bf41171a711206c3bb74b40015823841bf2b93e148da68e764370f1965"
  },
  "id": "SjNsl5ZZ6CTfJJlk",
  "tags": []
}
